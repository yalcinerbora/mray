#pragma once

#include <string_view>
#include <string>

// These header will be generated by CMake
#include <mray_cmake.h>

namespace MRay
{
    using namespace std::literals;

    static constexpr uint32_t VersionMajor = MRAY_VERSION_MAJOR;
    static constexpr uint32_t VersionMinor = MRAY_VERSION_MINOR;
    static constexpr uint32_t VersionPatch = MRAY_VERSION_PATCH;

    static const auto VersionString = ("v"s + std::to_string(VersionMajor) +
                                       "."s + std::to_string(VersionMinor) +
                                       "."s + std::to_string(VersionPatch));

    static constexpr auto PlatformName          = MRAY_PLATFORM_NAME;
    static constexpr auto CompilerName          = MRAY_COMPILER_NAME;
    static constexpr auto DeviceCompilerName    = MRAY_GPU_COMPILER_NAME;

    // Project Related
    static constexpr auto Name          = MRAY_PROJECT_NAME;
    static constexpr auto Description   = MRAY_PROJECT_DESCRIPTION;

    // TODO: Make authors from cmake as well, create contributors file, parse it etc.
    // Or add maintainers here and do similar thing as
    static constexpr auto Authors = "Yalciner B."sv;
    static constexpr auto License = "Apache-2.0 License (https://www.apache.org/licenses/LICENSE-2.0).\n"
                                    "This project utilize many open-source libraries. "
                                    "Please refer to *_LICENSE files for library licenses."sv;

    // For future-proofing (Probably 64-bit one has bugs, I did refactor
    // but not %100 sure)
    using CommonKey = uint32_t;
    using CommonIndex = uint32_t;

    // I am prepending these with mray just to be sure
    // Widnows probably will have a AVX512 macros somewhere in the windows.h header
    // (didn't check but just to be sure)
    enum class HostArch
    {
        MRAY_DEFAULT,
        MRAY_AVX2,
        MRAY_AVX512
    };

    template<class T>
    constexpr size_t HostArchSIMDWidth();

    #if defined MRAY_HOST_ARCH_AVX2
        static constexpr HostArch MRAY_HOST_ARCH = HostArch::MRAY_AVX2;
    #elif defined MRAY_HOST_ARCH_AVX512
        static constexpr HostArch MRAY_HOST_ARCH = HostArch::MRAY_AVX512;
    #else
        static constexpr HostArch MRAY_HOST_ARCH = HostArch::MRAY_DEFAULT;
    #endif

}

template<class T>
constexpr size_t MRay::HostArchSIMDWidth()
{
    size_t SIMD_WIDTH_BITS;
    if constexpr(MRAY_HOST_ARCH == HostArch::MRAY_AVX2)
        SIMD_WIDTH_BITS = 256;
    else if constexpr(MRAY_HOST_ARCH == HostArch::MRAY_AVX512)
        SIMD_WIDTH_BITS = 512;
    else return 1;

    return SIMD_WIDTH_BITS / CHAR_BIT / sizeof(T);
}
