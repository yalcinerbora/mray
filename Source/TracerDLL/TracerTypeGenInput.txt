

# Matrix of Types will be generated according to this table.
# '#' marks comments. Each line must have a Tag to distinguish types,
# types can be in any order, but for readability we group these.
#
# Types can be filtered if trailing columns include <Type>:<Name> column.
#
# No renderer work type will be generated for any other type but the types on the filters
# No accelerator work will be generated for any other type but the types on the filters (if applicable)
# No meta light will be generated for any other type but the type on the filters (if applicable)
#
# Putting a filter to type A and type B (which will be combined to a type) is redundant
#
# All types are prefixed

# Primitives (Name / Header File / Optional Filter)
P PrimGroupEmpty              "Tracer/PrimitivesDefault.h"
P PrimGroupTriangle           "Tracer/PrimitiveDefaultTriangle.h"
# P PrimGroupSkinnedTriangle    "Tracer/PrimitiveDefaultTriangle.h"
P PrimGroupSphere             "Tracer/PrimitivesDefault.h"

# Materials (Name / Header File / Optional Filter)
Mt MatGroupLambert             "Tracer/MaterialsDefault.h"
Mt MatGroupReflect             "Tracer/MaterialsDefault.h"
Mt MatGroupRefract             "Tracer/MaterialsDefault.h"
Mt MatGroupUnreal              "Tracer/MaterialsDefault.h"

# Transforms (Name / Header File / Optional Filter)
T TransformGroupIdentity      "Tracer/TransformsDefault.h"
T TransformGroupSingle        "Tracer/TransformsDefault.h"
T TransformGroupMulti         "Tracer/TransformsDefault.h"      Primitive:PrimGroupSkinnedTriangle

# Cameras (Name / Header File / Optional Filter)
C CameraGroupPinhole          "Tracer/CamerasDefault.h"         Transform:TransformGroupIdentity    Transform:TransformGroupSingle

# Mediums (Name / Header File / Optional Filter)
Md MediumGroupVacuum           "Tracer/MediumsDefault.h"
Md MediumGroupHomogeneous      "Tracer/MediumsDefault.h"

# Lights (Name / Header File / Optional Filter)
# Primitive Lights are not autogenerated, you need to explicitly set the type here
L LightGroupNull                                  "Tracer/LightsDefault.h"      Transform:TransformGroupIdentity
L LightGroupPrim<PrimGroupTriangle>               "Tracer/LightsDefault.h"      Transform:TransformGroupIdentity    Transform:TransformGroupSingle
L LightGroupSkysphere<CoOctaCoordConverter>       "Tracer/LightsDefault.h"      Transform:TransformGroupIdentity    Transform:TransformGroupSingle
L LightGroupSkysphere<SphericalCoordConverter>    "Tracer/LightsDefault.h"      Transform:TransformGroupIdentity    Transform:TransformGroupSingle

# Transforms (Tag / Name / Header File)
# There must be one line for each tag
A LIN     BaseAcceleratorLinear   AcceleratorGroupLinear  "Tracer/AcceleratorLinear.h"
A BVH     BaseAcceleratorLBVH     AcceleratorGroupLBVH    "Tracer/AcceleratorLBVH.h"
A HW      BaseAcceleratorOptiX    AcceleratorGroupOptiX   "Tracer/OptiX/AcceleratorOptiX.h"

# Renderer (Name / Header File / Work Count / Light Work Count / Camera Work Count)
# Renderer can define multiple kernerls ("works") to do multiple passes or switch to a different kernel
# when renderer parameters is changed.
# We will use these to explicitly instantiate templates


#                                                       WorkOverload        LWorkOverload               CWorkOverload       WorkCount   LWorkCount   CWorkCount
R TexViewRenderer     "Tracer/TexViewRenderer.h"        RenderWork          RenderLightWork             RenderCameraWork        0           0            0
R SurfaceRenderer     "Tracer/SurfaceRenderer.h"        RenderWork          RenderLightWork             RenderCameraWork        2           1            0
R PathTracerRenderer  "PathTracerRenderer.h"       PathTracerRenderWork PathTracerRenderLightWork   PathTracerRenderCamWork     2           2            0

